Infix to PostFix
    1. Scan the infix expression from left to right. 

    2. If the scanned character is an operand, Print it. 

    3. Else, 

        1. If the precedence of the scanned operator is greater than the precedence of the operator in the stack or the stack is empty or the stack contains a ‘(‘, push the character into the stack. 
        
        2.Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack. 
    4. If the scanned character is an ‘(‘, push it into the stack. 

    5. If the scanned character is an ‘)’, pop the stack and output it until a ‘(‘ is encountered, and discard both the parenthesis. 

    6. Repeat steps 2-5 until the entire infix expression is scanned. 

    7. Print the output.

Infix to PreFix
First, reverse the infix expression given in the problem.
Scan the expression from left to right.
Whenever the operands arrive, print them.
If the operator arrives and the stack is found to be empty, then simply push the operator into the stack.
If the incoming operator has higher precedence than the TOP of the stack, push the incoming operator into the stack.
If the incoming operator has the same precedence with a TOP of the stack, push the incoming operator into the stack.
If the incoming operator has lower precedence than the TOP of the stack, pop, and print the top of the stack. Test the incoming operator against the top of the stack again and pop the operator from the stack till it finds the operator of lower precedence or same precedence.
If the incoming operator has the same precedence with the top of the stack and the incoming operator is ^, then pop the top of the stack till the condition is true. If the condition is not true, push the ^ operator.
When we reach the end of the expression, pop, and print all the operators from the top of the stack.
If the operator is ')', then push it into the stack.
If the operator is '(', then pop all the operators from the stack till it finds the ‘)’ bracket in the stack.
If the top of the stack is ')', push the operator on the stack.
In the end, reverse the output. And print it.



PostFix to preFix
 -- Traverse Left to right
PostFix to Infix
 -- Traverse LEft to right
PreFix to PostFix
 -- Reverse string
 -- Traverse Left to Right
PreFix to Infix
 -- Reverse String
 -- Traverse Left to Right